function create_lab_personnel_chart

data_file_string = '../data/lab_personnel_timeline.xlsx';
output_file_string = '../output/lab_timeline.png';


% Code
d = readtable(data_file_string)

% Get date range
today = datetime('now')
end_date = datetime('Jul-2026');
begin_date = min(d.Start)
month_span = calmonths(between(begin_date, end_date))

% Sort table
[~,si] = sort(d.Start);
d = d(si,:);

% Get unique names
for i = 1 : size(d,1)
    d.FullName{i} = sprintf('%s %s', d.GivenName{i}, d.FamilyName{i});
end
unique_names = unique(d.FullName, 'stable');
n_un = numel(unique_names)

% Get unique categories
unique_roles = unique(d.Role);

s_d = size(d,1)

% Create an image
im = ones(numel(unique_names), month_span, 3);

% Create colors
color_map = return_matplotlib_default_colors()

for i = 1 : numel(unique_names)

    vi_name = find(strcmp(d.FullName, unique_names{i}));

    for j = 1 : numel(vi_name)

        start_months = calmonths(between(begin_date, d.Start(vi_name(j)))) + 1;
    
        if (~isnat(d.Stop(vi_name(j))))
            stop_months = calmonths(between(begin_date, d.Stop(vi_name(j))));
        else
            stop_months = calmonths(between(begin_date, today)) + 1;
        end
    
        % Deduce row_pos
        row_pos = numel(unique_names) - i + 1

        % Deduce color
        vi2 = find(strcmp(d.Role{vi_name(j)}, unique_roles));
        
        % Assign
        for k = start_months : stop_months
            im(row_pos, k, :) = color_map(vi2, :);
        end

        if (j==1)
            lhs(row_pos) = start_months - 2;
            y_tick_labels{row_pos} = unique_names{i};
        end
    end
end

% Make the figure
sp = initialise_publication_quality_figure( ...
        'no_of_panels_wide', 1, ...
        'no_of_panels_high', 2, ...
        'x_to_y_axes_ratio', 2, ...
        'axes_padding_left', 1.5, ...
        'axes_padding_right', 2.2, ...
        'right_margin', -8, ...
        'panel_label_font_size', 0, ...
        'relative_row_heights', [1, 0.05], ...
        'axes_padding_bottom', 0.2, ...
        'axes_padding_top', 0.2, ...
        'bottom_margin', 0.5);

subplot(sp(1));
image(im);

x_ticks = 1 : 12 : size(im, 2)
y_ticks = 1 : size(im,1);

x_tick_labels = cellstr(datestr(begin_date + calmonths(x_ticks-1), ...
        'YYYY'))

improve_axes( ...
    'x_axis_offset', 0, ...
    'x_axis_off', 1, ...
    'x_tick_length', 0.015, ...
    'x_ticks', x_ticks, ...
    'x_tick_labels', x_tick_labels, ...
    'x_tick_label_positions', x_ticks, ...
    'x_tick_label_rotation', 45, ...
    'x_tick_label_vertical_offset', -0.02, ...
    'x_axis_label', '', ...
    'y_axis_off', 1, ...
    'y_axis_offset', 0, ...
    'y_tick_length', 0.01, ...
    'y_ticks', y_ticks, ...
    'y_tick_labels', y_tick_labels, ...
    'y_tick_label_positions', y_ticks, ...
    'y_tick_label_horizontal_offset', -0.02, ...
    'y_axis_label', '', ...
    'tick_font_size', 6)

% Add labels
for r = 1 : size(im, 1)
    lhs = find(im(r, :, 2) < 1, 1, 'first')
    if (isempty(lhs))
        lhs = 100
    end
    text(lhs-3, r, y_tick_labels{r}, ...
        'HorizontalAlignment', 'right', ...
        'FontSize', 7);
end

for i = 1 : numel(unique_roles)
    h(i) = scatter(NaN, NaN, 'o', 'filled', ...
        'MarkerFaceColor', color_map(i,:));
end

legendflex(h, unique_roles, ...
    'anchor', {'ne', 'nw'}, ...
    'buffer', [20, 0], ...
    'padding', [2,4,4], ...
    'xscale', 0.5)

subplot(sp(2));
n = sum(im(:,:,1)<1, 1);
b = bar(n, 1);
b.FaceColor = 0.5*[1 1 1];

improve_axes( ...
    'x_axis_offset', 0, ...
    'x_tick_length', 0.015, ...
    'x_ticks', x_ticks, ...
    'x_tick_labels', x_tick_labels, ...
    'x_tick_label_positions', x_ticks, ...
    'x_tick_label_rotation', 45, ...
    'x_tick_label_vertical_offset', -0.02, ...
    'x_axis_label', '', ...
    'y_axis_offset', 0, ...
    'y_label_offset', -0.06, ...
    'y_tick_length', 0.006, ...
    'y_tick_decimal_places', 0, ...
    'y_tick_label_horizontal_offset', -0.01, ...
    'y_axis_label', {'Lab','size'}, ...
    'tick_font_size', 12)

exportgraphics(gcf, output_file_string);
